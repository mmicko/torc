#line 2 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex_pregen.yy.cpp"

#line 4 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex_pregen.yy.cpp"

#define  YY_INT_ALIGNED long int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
#define yy_create_buffer V3PreLex_create_buffer
#define yy_delete_buffer V3PreLex_delete_buffer
#define yy_flex_debug V3PreLex_flex_debug
#define yy_init_buffer V3PreLex_init_buffer
#define yy_flush_buffer V3PreLex_flush_buffer
#define yy_load_buffer_state V3PreLex_load_buffer_state
#define yy_switch_to_buffer V3PreLex_switch_to_buffer
#define yyin V3PreLexin
#define yyleng V3PreLexleng
#define yylex V3PreLexlex
#define yylineno V3PreLexlineno
#define yyout V3PreLexout
#define yyrestart V3PreLexrestart
#define yytext V3PreLextext
#define yywrap V3PreLexwrap
#define yyalloc V3PreLexalloc
#define yyrealloc V3PreLexrealloc
#define yyfree V3PreLexfree

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE V3PreLexrestart(V3PreLexin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int V3PreLexleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *V3PreLexin, *V3PreLexout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up V3PreLextext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up V3PreLextext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via V3PreLexrestart()), so that the user can continue scanning by
	 * just pointing V3PreLexin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* yy_hold_char holds the character lost when V3PreLextext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int V3PreLexleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow V3PreLexwrap()'s to do buffer switches
 * instead of setting up a fresh V3PreLexin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void V3PreLexrestart (FILE *input_file  );
void V3PreLex_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE V3PreLex_create_buffer (FILE *file,int size  );
void V3PreLex_delete_buffer (YY_BUFFER_STATE b  );
void V3PreLex_flush_buffer (YY_BUFFER_STATE b  );
void V3PreLexpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void V3PreLexpop_buffer_state (void );

static void V3PreLexensure_buffer_stack (void );
static void V3PreLex_load_buffer_state (void );
static void V3PreLex_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER V3PreLex_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE V3PreLex_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE V3PreLex_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE V3PreLex_scan_bytes (yyconst char *bytes,int len  );

/* %endif */

void *V3PreLexalloc (yy_size_t  );
void *V3PreLexrealloc (void *,yy_size_t  );
void V3PreLexfree (void *  );

#define yy_new_buffer V3PreLex_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        V3PreLexensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            V3PreLex_create_buffer(V3PreLexin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        V3PreLexensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            V3PreLex_create_buffer(V3PreLexin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] V3PreLextext/V3PreLexin/V3PreLexout/yy_state_type/V3PreLexlineno etc. def's & init go here */
/* Begin user sect3 */

#define V3PreLexwrap(n) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

FILE *V3PreLexin = (FILE *) 0, *V3PreLexout = (FILE *) 0;

typedef int yy_state_type;

extern int V3PreLexlineno;

int V3PreLexlineno = 1;

extern char *V3PreLextext;
#define yytext_ptr V3PreLextext

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up V3PreLextext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle V3PreLextext and V3PreLexleng for yymore() goes here \ */\
	(yytext_ptr) -= (yy_more_len); \
	V3PreLexleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to V3PreLextext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 110
#define YY_END_OF_BUFFER 111
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int32_t yy_accept[337] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       82,   82,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  111,  109,  106,  103,  108,  107,   14,  109,
      104,  109,  109,  106,  108,  109,   86,  108,   83,   84,
       85,  109,   89,   88,   87,   88,  109,  109,   98,   98,
       82,  110,   96,   92,   94,   92,   96,   96,   97,   97,
       97,   95,   17,   15,   17,   20,   16,  110,   33,   32,
       33,   31,   46,   39,   48,   38,   41,   34,   35,   48,
       48,   44,   48,   45,   46,   55,   53,   57,   52,   57,

       57,   57,   62,   60,   62,   62,   61,   62,   77,   66,
       78,   65,   67,   72,   73,   78,   74,   78,   70,   71,
       78,   28,   27,   28,   30,  110,   25,   24,   25,   25,
      106,  103,    0,   90,   81,  104,    0,  104,   21,  101,
        0,  101,  101,  101,  101,  101,  101,  106,    0,    0,
        0,  101,   86,    0,    0,   88,   87,   88,   99,  100,
       98,    0,   82,   92,   94,   92,   93,    0,    0,   95,
       15,    0,   16,   19,   18,   19,   32,    0,   46,   39,
        0,   36,   37,   47,   40,    0,   43,    0,   55,   53,
        0,   49,   51,   56,   54,    0,   60,    0,   58,   61,

       59,    0,   77,   66,    0,   63,   64,   69,   75,    0,
       27,    0,   29,   24,    0,    0,    0,   80,    0,    0,
      105,  104,  101,    0,  101,    0,  101,  101,  101,  101,
      101,  101,  101,  101,  101,    0,  101,  100,   91,    0,
       37,    0,   51,   51,   64,   75,    0,   75,    0,    0,
        0,  104,  102,   22,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,    0,  101,   42,   50,    0,
       76,   68,    0,   79,  101,  101,  101,    3,  101,  101,
      101,  101,  101,  101,  101,  101,    0,  101,    0,  101,
      101,  101,    4,    5,   13,    6,  101,  101,  101,    9,

        0,    0,    0,  101,  101,    2,    7,  101,  101,  101,
        0,    0,    1,    0,    0,  101,  101,    8,  101,  101,
        0,    0,   11,   12,  101,  101,    0,   23,  101,    0,
      101,    0,   10,    0,   26,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    1,    1,    1,    1,
        1,    2,    1,    6,    1,    7,    1,    1,    1,    8,
        9,   10,    1,   11,    1,    1,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    1,   14,    1,
        1,   15,    1,    1,   16,   16,   16,   16,   17,   18,
       16,   16,   19,   16,   16,   20,   16,   21,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       22,   23,   24,    1,   25,   26,   27,   16,   28,   29,

       30,   31,   16,   16,   32,   16,   16,   33,   16,   34,
       35,   36,   16,   37,   38,   39,   40,   16,   16,   16,
       16,   16,   41,    1,   42,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[43] =
    {   0,
        1,    2,    3,    4,    1,    5,    6,    7,    7,    8,
        9,    8,   10,    1,    1,   11,   11,   11,   11,   11,
       11,    7,   12,    7,   11,   13,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
        7,    7
    } ;

static yyconst flex_int32_t yy_base[371] =
    {   0,
        0,   41,   65,    0,   44,   47,   44,   45,  929,  917,
       49,   55,   62,   78,  114,    0,  156,    0,   81,   89,
      196,  236,  211,  251,  278,    0,  318,  358,   72,  209,
       57,  207,  920,  991,  906,  991,   59,  991,  991,   84,
      881,    0,  395,  205,  223,  430,  991,   96,  991,  991,
      991,   80,  991,  100,  991,  106,  883,  882,  991,  108,
        0,  991,  991,  226,  991,  248,  881,  852,  991,  232,
      875,    0,  991,  991,  261,  991,    0,  263,  991,  991,
      265,  991,    0,  991,  267,    0,  991,  991,  991,  991,
      263,  991,  328,  991,  327,    0,  991,  331,    0,  991,

      326,  342,  991,  991,  344,  874,    0,  348,    0,  991,
      350,    0,  991,  991,  991,  991,  991,  327,  991,  991,
      349,  991,  991,  353,  991,    0,  991,  991,  370,  855,
      871,  991,  372,  991,  375,  842,  841,  840,  991,  839,
      838,  360,   75,  357,  361,  367,  362,  403,  404,  827,
      411,  221,  991,  394,  833,  408,  991,  419,  991,    0,
      991,  399,    0,  415,  991,  430,  991,  825,  435,    0,
      991,  437,    0,  991,  991,  439,  991,  441,    0,  991,
      443,  991,    0,  991,  991,  445,  991,  830,    0,  991,
      447,  991,  832,  991,  991,  453,  991,  461,  991,    0,

      991,  464,    0,  991,  468,  991,    0,  991,  828,  809,
      991,  470,  991,  991,  472,  797,  475,  991,  478,  789,
      991,  800,  783,  779,  778,  796,  465,  458,   52,  432,
      460,  461,  400,  323,  467,  769,  466,    0,  991,  495,
        0,  794,  748,  498,    0,  744,  739,  738,  757,  733,
      728,  724,  991,  991,  390,  484,  339,  483,  462,  481,
      246,  479,  486,  478,  492,  715,  494,  991,  991,  522,
      991,  991,  712,  991,  503,  506,  502,  719,  504,  507,
      505,  508,  511,  177,  514,  517,  712,  543,  704,  529,
      532,  524,  714,  580,  579,  578,  525,  531,  426,  527,

      559,  562,  568,  542,  545,  576,  548,  546,  536,  547,
      574,  580,  991,  583,  513,  554,  563,  480,  564,  565,
      589,  439,  363,  317,  570,  571,  297,  231,  574,  204,
      575,  199,   87,   15,  991,  991,  608,  621,  634,  647,
      660,  673,  686,  699,  712,  725,  733,  746,  755,  767,
      771,  773,  784,  797,  810,  823,  836,  840,  851,  858,
      870,  878,  891,  904,  917,  930,  943,  951,  964,  977
    } ;

static yyconst flex_int32_t yy_def[371] =
    {   0,
      336,    1,    1,    3,  337,  337,    1,    1,  338,  338,
      339,  339,  340,  340,  336,   15,  336,   17,  341,  341,
      342,  342,  343,  343,  336,   25,  344,  344,  345,  345,
      346,  346,  336,  336,  336,  336,  336,  336,  336,  336,
      347,  348,  349,  336,  336,  349,  336,  336,  336,  336,
      336,  349,  336,  336,  336,  336,  336,  336,  336,  336,
      350,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  351,  336,  336,  336,  336,  352,  353,  336,  336,
      336,  336,  354,  336,  336,  354,  336,  336,  336,  336,
      336,  336,  355,  336,  354,  356,  336,  336,  356,  336,

      336,  357,  336,  336,  336,  336,  358,  336,  359,  336,
      336,  359,  336,  336,  336,  336,  336,  336,  336,  336,
      360,  336,  336,  336,  336,  361,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  347,  336,  348,  336,  362,
      363,  362,  362,  362,  362,  362,  362,  336,  336,  336,
      336,  362,  336,  336,  363,  336,  336,  336,  336,  364,
      336,  336,  350,  336,  336,  336,  336,  336,  336,  351,
      336,  336,  352,  336,  336,  336,  336,  336,  354,  336,
      336,  336,  365,  336,  336,  336,  336,  336,  356,  336,
      336,  336,  366,  336,  336,  336,  336,  336,  336,  358,

      336,  336,  359,  336,  336,  336,  367,  336,  368,  369,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  348,  362,  336,  363,  336,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  336,  362,  364,  336,  336,
      365,  336,  366,  366,  367,  368,  336,  369,  336,  336,
      336,  348,  336,  336,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  336,  362,  336,  336,  336,
      336,  336,  336,  336,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  336,  362,  336,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,

      336,  370,  336,  362,  362,  362,  362,  362,  362,  362,
      370,  370,  336,  370,  336,  362,  362,  362,  362,  362,
      370,  336,  362,  362,  362,  362,  336,  362,  362,  336,
      362,  336,  362,  336,  336,    0,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336
    } ;

static yyconst flex_int32_t yy_nxt[1034] =
    {   0,
       34,   35,   36,   37,   38,   39,   34,   34,   34,   34,
       34,   40,   34,   34,   34,   41,   41,   41,   41,   41,
       41,   34,   42,   34,   41,   43,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       34,   34,   44,  335,   45,   54,   55,   56,   54,   55,
       56,   62,   62,   57,   57,   58,   58,   62,   62,  128,
      129,  132,  133,   64,   65,   66,   46,   47,   48,   52,
       52,   67,   49,   50,  123,  124,   34,  224,   51,   64,
       65,   66,  130,   80,   81,  336,  125,   67,   82,  258,
       52,   80,   81,  134,  126,  135,   82,   68,  153,  154,

      224,  156,  155,  156,  228,   49,   50,  156,  157,  158,
      161,  162,  224,   68,   69,   69,   65,   70,   69,   69,
       69,   69,   69,   71,   69,   69,   72,   69,   69,   72,
       72,   72,   72,   72,   72,   69,   69,   69,   72,   69,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   69,   69,   73,   73,   74,   75,
       73,   76,   73,   73,   73,   73,   73,   73,   77,   73,
       73,   77,   77,   77,   77,   77,   77,   73,   78,   73,
       77,   73,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   73,   73,   84,   85,

       86,   87,  224,   88,   89,   90,  148,   91,  149,  128,
      129,  123,  124,   97,   98,   99,  298,   92,   93,   94,
      100,   95,  101,  125,  149,  132,  151,  164,  334,  164,
      150,  126,  130,  102,  165,  169,   92,   94,   84,   85,
       86,   87,  332,   88,   89,   90,  224,   91,  150,  164,
      165,  166,  237,   97,   98,   99,  224,   92,   93,   94,
      100,   95,  101,  171,  172,  175,  176,  177,  178,  180,
      181,  224,  182,  102,  183,  282,   92,   94,  103,  103,
      104,  105,  103,  103,  103,  103,  103,  106,  103,  103,
      107,  103,  103,  107,  107,  107,  107,  107,  107,  103,

      108,  103,  107,  103,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  103,  103,
      110,  111,  112,  113,  330,  114,  115,  116,  117,  118,
      185,  186,  187,  190,  191,  192,  206,  193,  207,  119,
      116,  120,  224,  121,  195,  196,  197,  198,  224,  188,
      201,  202,  204,  205,  208,  211,  212,  264,  119,  120,
      110,  111,  112,  113,  224,  114,  115,  116,  117,  118,
      277,  210,  214,  215,  132,  133,  217,  218,  219,  119,
      116,  120,  224,  121,  227,  224,  224,  224,  224,  229,
      230,  232,  224,  231,  233,  235,  153,  154,  119,  120,

      139,  161,  162,  234,  148,  149,  149,  149,  275,  156,
      220,  156,  149,  132,  151,  224,  164,  141,  164,  142,
      156,  157,  158,  143,  144,  224,  145,  263,  150,  150,
      146,  164,  165,  166,  147,  139,  150,  165,  169,  171,
      172,  175,  240,  177,  178,  180,  181,  185,  186,  190,
      191,  224,  141,  309,  142,  195,  196,  224,  143,  144,
      259,  145,  152,  197,  198,  146,  201,  202,  327,  147,
      204,  205,  211,  212,  214,  215,  217,  218,  219,  217,
      218,  219,  255,  224,  256,  224,  224,  224,  257,  261,
      224,  224,  224,  280,  262,  265,  260,  175,  240,  267,

      269,  270,  276,  224,  224,  224,  224,  283,  224,  224,
      220,  224,  278,  220,  279,  281,  285,  224,  284,  224,
      244,  286,  290,  288,  269,  270,  291,  224,  224,  224,
      224,  224,  224,  224,  293,  292,  224,  294,  296,  224,
      297,  295,  224,  299,  302,  304,  302,  300,  305,  224,
      224,  322,  224,  306,  224,  307,  224,  224,  310,  308,
      302,  224,  302,  312,  313,  314,  316,  224,  224,  317,
      224,  224,  224,  224,  319,  318,  313,  321,  323,  224,
      320,  312,  313,  314,  312,  313,  314,  324,  224,  224,
      224,  313,  321,  325,  326,  224,  224,  329,  328,  224,

      224,  224,  315,  224,  224,  224,  331,  333,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,  109,

      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  136,  224,
      303,  301,  136,  136,  224,  136,  138,  289,  287,  252,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  140,
      274,  273,  272,  247,  271,  140,  140,  163,  163,  247,
      244,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      170,  170,  173,  173,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  179,  179,  268,

      266,  254,  179,  224,  253,  179,  179,  179,  224,  179,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  189,  189,  252,  251,  189,  189,  189,
      250,  189,  189,  189,  249,  189,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  200,
      200,  203,  203,  247,  244,  242,  203,  239,  336,  236,
      203,  203,  209,  226,  224,  222,  221,  137,  209,  209,
      213,  213,  131,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  223,  216,  199,  167,  223,  223,  168,
      223,  225,  167,  160,  159,  225,  225,  225,  225,  225,

      225,  225,  225,  225,  238,  238,  137,  131,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  241,  241,  336,
       60,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      243,  243,   60,  336,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  245,  245,  336,  336,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  246,  336,  336,  336,
      246,  246,  336,  246,  248,  336,  336,  336,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
       33,  336,  336,  336,  336,  336,  336,  336,  336,  336,

      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336
    } ;

static yyconst flex_int32_t yy_chk[1034] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,  334,    2,    5,    5,    5,    6,    6,
        6,   11,   11,    7,    8,    7,    8,   12,   12,   31,
       31,   37,   37,   13,   13,   13,    2,    3,    3,    7,
        8,   13,    3,    3,   29,   29,    3,  229,    3,   14,
       14,   14,   31,   19,   19,   52,   29,   14,   19,  229,
        3,   20,   20,   40,   29,   40,   20,   13,   48,   48,

      143,   54,   52,   54,  143,    3,    3,   56,   56,   56,
       60,   60,  333,   14,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   21,   21,

       21,   21,  284,   21,   21,   21,   44,   21,   44,   32,
       32,   30,   30,   23,   23,   23,  284,   21,   21,   21,
       23,   21,   23,   30,   45,   45,   45,   64,  332,   64,
       44,   30,   32,   23,   70,   70,   21,   21,   22,   22,
       22,   22,  330,   22,   22,   22,  152,   22,   45,   66,
       66,   66,  152,   24,   24,   24,  328,   22,   22,   22,
       24,   22,   24,   75,   75,   78,   78,   81,   81,   85,
       85,  261,   91,   24,   91,  261,   22,   22,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       27,   27,   27,   27,  327,   27,   27,   27,   27,   27,
       93,   93,   95,   98,   98,  101,  118,  101,  118,   27,
       27,   27,  324,   27,  102,  102,  105,  105,  234,   95,
      108,  108,  111,  111,  121,  124,  124,  234,   27,   27,
       28,   28,   28,   28,  257,   28,   28,   28,   28,   28,
      257,  121,  129,  129,  133,  133,  135,  135,  135,   28,
       28,   28,  144,   28,  142,  142,  145,  147,  323,  144,
      144,  145,  146,  144,  145,  147,  154,  154,   28,   28,

       43,  162,  162,  146,  148,  149,  148,  149,  255,  156,
      135,  156,  151,  151,  151,  255,  164,   43,  164,   43,
      158,  158,  158,   43,   43,  233,   43,  233,  148,  149,
       43,  166,  166,  166,   43,   46,  151,  169,  169,  172,
      172,  176,  176,  178,  178,  181,  181,  186,  186,  191,
      191,  299,   46,  299,   46,  196,  196,  230,   46,   46,
      230,   46,   46,  198,  198,   46,  202,  202,  322,   46,
      205,  205,  212,  212,  215,  215,  217,  217,  217,  219,
      219,  219,  227,  228,  227,  231,  232,  259,  228,  232,
      227,  237,  235,  259,  232,  235,  231,  240,  240,  237,

      244,  244,  256,  264,  262,  318,  260,  262,  258,  256,
      217,  263,  258,  219,  258,  260,  264,  265,  263,  267,
      244,  265,  275,  267,  270,  270,  276,  277,  275,  279,
      281,  276,  280,  282,  279,  277,  283,  280,  282,  285,
      283,  281,  286,  285,  288,  290,  288,  286,  291,  292,
      297,  315,  300,  292,  290,  297,  298,  291,  300,  298,
      301,  309,  301,  302,  302,  302,  304,  304,  288,  305,
      305,  308,  310,  307,  309,  308,  311,  311,  316,  316,
      310,  312,  312,  312,  314,  314,  314,  317,  317,  319,
      320,  321,  321,  319,  320,  325,  326,  326,  325,  329,

      331,  306,  303,  296,  295,  294,  329,  331,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  344,

      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  347,  293,
      289,  287,  347,  347,  278,  347,  348,  273,  266,  252,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  349,
      251,  250,  249,  248,  247,  349,  349,  350,  350,  246,
      243,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      351,  351,  352,  352,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  354,  354,  242,

      236,  226,  354,  225,  224,  354,  354,  354,  223,  354,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  356,  356,  222,  220,  356,  356,  356,
      216,  356,  356,  356,  210,  356,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  358,
      358,  359,  359,  209,  193,  188,  359,  168,  155,  150,
      359,  359,  360,  141,  140,  138,  137,  136,  360,  360,
      361,  361,  131,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  362,  130,  106,   71,  362,  362,   68,
      362,  363,   67,   58,   57,  363,  363,  363,  363,  363,

      363,  363,  363,  363,  364,  364,   41,   35,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  365,  365,   33,
       10,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      366,  366,    9,    0,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  367,  367,    0,    0,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  368,    0,    0,    0,
      368,  368,    0,  368,  369,    0,    0,    0,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,

      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int V3PreLex_flex_debug;
int V3PreLex_flex_debug = 1;

static yyconst flex_int32_t yy_rule_linenum[110] =
    {   0,
       94,   98,   99,  100,  101,  102,  103,  104,  105,  106,
      109,  113,  117,  120,  122,  123,  124,  125,  126,  127,
      132,  133,  136,  138,  139,  140,  144,  145,  146,  147,
      151,  152,  154,  157,  158,  159,  160,  161,  163,  164,
      165,  166,  167,  168,  169,  170,  171,  172,  175,  176,
      177,  178,  180,  181,  182,  183,  184,  189,  190,  192,
      194,  195,  199,  200,  201,  203,  204,  205,  206,  207,
      208,  209,  218,  224,  229,  230,  231,  232,  235,  237,
      238,  240,  243,  244,  245,  246,  249,  250,  251,  256,
      257,  258,  259,  260,  262,  263,  264,  268,  269,  270,

      274,  275,  278,  280,  281,  282,  283,  284,  285
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *V3PreLextext;
#line 1 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
#line 6 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
/**************************************************************************
 * DESCRIPTION: Verilator: Flex verilog preprocessor
 *
 * Code available from: http://www.veripool.org/verilator
 *
 **************************************************************************
 *
 * Copyright 2003-2012 by Wilson Snyder.  This program is free software;
 * you can redistribute it and/or modify it under the terms of either the
 * GNU Lesser General Public License Version 3 or the Perl Artistic License
 * Version 2.0.
 *
 * Verilator is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 **************************************************************************
 * Do not use Flex in C++ mode.  It has bugs with yyunput() which result in
 * lost characters.
 **************************************************************************/

#include "V3PreProc.h"
#include "V3PreLex.h"

V3PreLex* V3PreLex::s_currentLexp = NULL;	// Current lexing point

#define LEXP V3PreLex::s_currentLexp

#define YY_INPUT(buf,result,max_size) \
    result = LEXP->inputToLex(buf,max_size);

// Accessors, because flex keeps changing the type of V3PreLexleng
char* yyourtext() { return V3PreLextext; }
size_t yyourleng() { return V3PreLexleng; }
void yyourtext(const char* textp, size_t size) { V3PreLextext=(char*)textp; V3PreLexleng=size; }

// Prevent conflicts from perl version
static void linenoInc()  {LEXP->linenoInc();}
static bool optPsl() { return V3PreProc::optPsl(); }
static bool pedantic() { return LEXP->m_pedantic; }
static void yyerror(char* msg) { LEXP->curFilelinep()->v3error(msg); }
static void yyerrorf(const char* msg) { LEXP->curFilelinep()->v3error(msg); }
static void appendDefValue(const char* t, size_t l) { LEXP->appendDefValue(t,l); }
static int  pslParenLevel()    { return LEXP->m_pslParenLevel; }
static void pslParenLevelInc() { LEXP->m_pslParenLevel++; }
static void pslParenLevelDec() { if (pslParenLevel()) LEXP->m_pslParenLevel--; }
static bool pslMoreNeeded()    { return LEXP->m_pslMoreNeeded; }
static void pslMoreNeeded(bool flag) { LEXP->m_pslMoreNeeded = flag; }

/**********************************************************************/















/* drop: Drop Ctrl-Z - can't pass thru or may EOF the output too soon */
/* Where we use symb/symbdef, we must also look for a `` join */
/* Note in the preprocessor \ESCaped is *not* always special; mantis1537/bug441 */
/**************************************************************/
#line 988 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex_pregen.yy.cpp"

#define INITIAL 0
#define PSLONEM 1
#define PSLONEE 2
#define PSLMULM 3
#define PSLMUL1 4
#define CMTONEM 5
#define CMTBEGM 6
#define CMTMODE 7
#define STRMODE 8
#define DEFFPAR 9
#define DEFFORM 10
#define DEFVAL 11
#define DEFCMT 12
#define ARGMODE 13
#define INCMODE 14
#define PRTMODE 15

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals (void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int V3PreLexlex_destroy (void );

int V3PreLexget_debug (void );

void V3PreLexset_debug (int debug_flag  );

YY_EXTRA_TYPE V3PreLexget_extra (void );

void V3PreLexset_extra (YY_EXTRA_TYPE user_defined  );

FILE *V3PreLexget_in (void );

void V3PreLexset_in  (FILE * in_str  );

FILE *V3PreLexget_out (void );

void V3PreLexset_out  (FILE * out_str  );

int V3PreLexget_leng (void );

char *V3PreLexget_text (void );

int V3PreLexget_lineno (void );

void V3PreLexset_lineno (int line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int V3PreLexwrap (void );
#else
extern int V3PreLexwrap (void );
#endif
#endif

/* %not-for-header */

    static void yyunput (int c,char *buf_ptr  );
    
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( V3PreLextext, V3PreLexleng, 1, V3PreLexout )
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; ((size_t)n < (size_t)max_size) && \
			     (c = getc( V3PreLexin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( V3PreLexin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, V3PreLexin))==0 && ferror(V3PreLexin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(V3PreLexin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int V3PreLexlex (void);

#define YY_DECL int V3PreLexlex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after V3PreLextext and V3PreLexleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( V3PreLexleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(V3PreLextext[V3PreLexleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 92 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"


#line 1261 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex_pregen.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! V3PreLexin )
/* %if-c-only */
			V3PreLexin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! V3PreLexout )
/* %if-c-only */
			V3PreLexout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			V3PreLexensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				V3PreLex_create_buffer(V3PreLexin,YY_BUF_SIZE );
		}

		V3PreLex_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of V3PreLextext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 337 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 991 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for V3PreLexlineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( V3PreLex_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 110 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], V3PreLextext );
			else if ( yy_act == 110 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         V3PreLextext );
			else if ( yy_act == 111 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 94 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ LEXP->lineDirective(V3PreLextext);
					  return(VP_LINE); }
	YY_BREAK
/* Special directives we recognize */
case 2:
YY_RULE_SETUP
#line 98 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ return(VP_DEFINE); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 99 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ return(VP_ELSE); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 100 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ return(VP_ELSIF); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 101 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ return(VP_ENDIF); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 102 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ return(VP_IFDEF); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 103 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ return(VP_IFNDEF); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 104 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ return(VP_INCLUDE); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 105 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ return(VP_UNDEF); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 106 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ return(VP_UNDEFINEALL); }
	YY_BREAK
/* Optional directives we recognize */
case 11:
YY_RULE_SETUP
#line 109 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ static string rtnfile;
			  rtnfile = '"'; rtnfile += LEXP->curFilelinep()->filename().c_str();
			  rtnfile += '"'; V3PreLextext=(char*)rtnfile.c_str(); V3PreLexleng = rtnfile.length();
			  return (VP_STRING); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 113 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ static char buf[10];
			  sprintf(buf, "%d",LEXP->curFilelinep()->lineno());
	                  V3PreLextext = buf; V3PreLexleng = strlen(V3PreLextext);
			  return (VP_TEXT); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 117 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ if (!pedantic()) return (VP_ERROR); else return(VP_DEFREF); }
	YY_BREAK
/* Pass-through strings */
case 14:
YY_RULE_SETUP
#line 120 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yy_push_state(STRMODE); yymore(); }
	YY_BREAK
case YY_STATE_EOF(STRMODE):
#line 121 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ linenoInc(); yyerrorf("EOF in unterminated string"); V3PreLexleng=0; yyterminate(); }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 122 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ linenoInc(); yyerrorf("Unterminated string"); BEGIN(INITIAL); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 123 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 124 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 125 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ linenoInc(); yymore(); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 126 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 127 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yy_pop_state();
			  if (LEXP->m_parenLevel || LEXP->m_formalLevel) { appendDefValue(V3PreLextext,V3PreLexleng); V3PreLexleng=0; }
			  else return (VP_STRING); }
	YY_BREAK
/* Stringification */
case 21:
YY_RULE_SETUP
#line 132 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ return VP_STRIFY; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 133 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ return VP_BACKQUOTE; }
	YY_BREAK
/* Protected blocks */
case 23:
YY_RULE_SETUP
#line 136 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yy_push_state(PRTMODE); yymore(); }
	YY_BREAK
case YY_STATE_EOF(PRTMODE):
#line 137 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ linenoInc(); yyerrorf("EOF in `protected"); V3PreLexleng=0; yyterminate(); }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 138 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ linenoInc(); yymore(); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 139 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 140 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yy_pop_state(); return (VP_TEXT); }
	YY_BREAK
/* Pass-through include <> filenames */
case YY_STATE_EOF(INCMODE):
#line 143 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ linenoInc(); yyerrorf("EOF in unterminated include filename"); V3PreLexleng=0; yyterminate(); }
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 144 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ linenoInc(); yyerrorf("Unterminated include filename"); BEGIN(INITIAL); }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 145 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 146 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 147 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yy_pop_state(); return (VP_STRING); }
	YY_BREAK
/* Reading definition formal parenthesis (or not) to begin formal arguments */
/* Note '(' must IMMEDIATELY follow definition name */
case 31:
YY_RULE_SETUP
#line 151 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ appendDefValue("(",1); LEXP->m_formalLevel=1; BEGIN(DEFFORM); }
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 152 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yy_pop_state(); unput('\n'); V3PreLexleng=0; return VP_DEFFORM; } /* DEFVAL will later grab the return */
	YY_BREAK
case YY_STATE_EOF(DEFFPAR):
#line 153 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yy_pop_state(); return VP_DEFFORM; }  /* empty formals */
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 154 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yy_pop_state(); unput(V3PreLextext[V3PreLexleng-1]); V3PreLexleng=0; return VP_DEFFORM; }  /* empty formals */
	YY_BREAK
/* Reading definition formals (declaration of a define) */
case 34:
YY_RULE_SETUP
#line 157 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ appendDefValue(V3PreLextext,V3PreLexleng); V3PreLexleng=0; ++LEXP->m_formalLevel; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 158 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ appendDefValue(V3PreLextext,V3PreLexleng); V3PreLexleng=0; if ((--LEXP->m_formalLevel)==0) { yy_pop_state(); return VP_DEFFORM; } }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 159 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yy_push_state(CMTMODE); yymore(); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 160 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ return (VP_COMMENT);}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 161 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ }
	YY_BREAK
case YY_STATE_EOF(DEFFORM):
#line 162 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ linenoInc(); yy_pop_state(); yyerrorf("Unterminated ( in define formal arguments."); V3PreLexleng=0; return VP_DEFFORM; }
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 163 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ linenoInc(); appendDefValue((char*)"\n",1); } /* Include return so can maintain output line count */
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 164 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ linenoInc(); appendDefValue((char*)"\\\n",2); } /* Include return so can maintain output line count */
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 165 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yy_push_state(STRMODE); yymore(); }  /* Legal only in default values */
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 166 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ appendDefValue(V3PreLextext,V3PreLexleng); }  /* Maybe illegal, otherwise in default value */
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 167 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ appendDefValue(V3PreLextext,V3PreLexleng); }  /* Maybe illegal, otherwise in default value */
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 168 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ LEXP->m_formalLevel++; appendDefValue(V3PreLextext,V3PreLexleng); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 169 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ LEXP->m_formalLevel--; appendDefValue(V3PreLextext,V3PreLexleng); }
	YY_BREAK
case 46:
#line 171 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
case 47:
#line 172 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
case 48:
YY_RULE_SETUP
#line 172 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ appendDefValue(V3PreLextext,V3PreLexleng); }
	YY_BREAK
/* Reading definition value (declaration of a define's text) */
case 49:
YY_RULE_SETUP
#line 175 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ LEXP->m_defCmtSlash=false; yy_push_state(DEFCMT); yymore(); }  /* Special comment parser */
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 176 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ linenoInc(); appendDefValue((char*)"\n",1); }  /* Spec says // not part of define value */
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 177 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ return (VP_COMMENT);}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 178 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ }
	YY_BREAK
case YY_STATE_EOF(DEFVAL):
#line 179 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ linenoInc(); yy_pop_state(); V3PreLextext=(char*)"\n"; V3PreLexleng=1; return (VP_DEFVALUE); } /* Technically illegal, but people complained */
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 180 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ linenoInc(); yy_pop_state(); V3PreLextext=(char*)"\n"; V3PreLexleng=1; return (VP_DEFVALUE); }
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 181 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ linenoInc(); appendDefValue((char*)"\\\n",2); } /* Return, AND \ is part of define value */
	YY_BREAK
case 55:
#line 183 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
case 56:
#line 184 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
case 57:
YY_RULE_SETUP
#line 184 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ appendDefValue(V3PreLextext,V3PreLexleng); }
	YY_BREAK
/* Comments inside define values - if embedded get added to define value per spec */
/* - if no \{crnl} ending then the comment belongs to the next line, as a non-embedded comment */
/* - if all but (say) 3rd line is missing \ then it's indeterminate */
case 58:
YY_RULE_SETUP
#line 189 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yy_pop_state(); appendDefValue(V3PreLextext,V3PreLexleng); }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 190 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ linenoInc(); LEXP->m_defCmtSlash=true;
	 		  appendDefValue(V3PreLextext,V3PreLexleng-2); appendDefValue((char*)"\n",1); }  /* Return but not \ */
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 192 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ linenoInc(); yymore(); if (LEXP->m_defCmtSlash) yyerrorf("One line of /* ... */ is missing \\ before newline");
			  BEGIN(CMTMODE); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 194 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 195 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
case YY_STATE_EOF(DEFCMT):
#line 196 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yyerrorf("EOF in '/* ... */' block comment\n"); V3PreLexleng=0; yyterminate(); }
	YY_BREAK
/* Define arguments (use of a define) */
case 63:
YY_RULE_SETUP
#line 199 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yy_push_state(CMTMODE); yymore(); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 200 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ return (VP_COMMENT);}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 201 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ }
	YY_BREAK
case YY_STATE_EOF(ARGMODE):
#line 202 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yyerrorf("EOF in define argument list\n"); V3PreLexleng = 0; yyterminate(); }
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 203 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ linenoInc(); V3PreLextext=(char*)"\n"; V3PreLexleng=1; return(VP_WHITE); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 204 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yy_push_state(STRMODE); yymore(); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 205 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ appendDefValue(V3PreLextext,V3PreLexleng); }  /* Literal text */
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 206 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ return(VP_STRIFY); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 207 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ LEXP->m_parenLevel++; appendDefValue(V3PreLextext,V3PreLexleng); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 208 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ LEXP->m_parenLevel--; appendDefValue(V3PreLextext,V3PreLexleng); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 209 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ LEXP->m_parenLevel++;
			  // Note paren level 0 means before "(" of starting args
			  // Level 1 means "," between arguments
			  // Level 2+ means one argument's internal ()
			  if (LEXP->m_parenLevel>1) {
			      appendDefValue(V3PreLextext,V3PreLexleng);
			  } else {
			      return (VP_TEXT);
			}}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 218 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ LEXP->m_parenLevel--;
			  if (LEXP->m_parenLevel>0) {
			      appendDefValue(V3PreLextext,V3PreLexleng);
			  } else {
			      yy_pop_state(); return (VP_DEFARG);
			}}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 224 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ if (LEXP->m_parenLevel>1) {
			      appendDefValue(V3PreLextext,V3PreLexleng);
			  } else {
			      yy_pop_state(); return (VP_DEFARG);
			}}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 229 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ appendDefValue(V3PreLextext,V3PreLexleng); }  /* defref in defref - outer macro expands first */
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 230 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ appendDefValue(V3PreLextext,V3PreLexleng); }  /* defref in defref - outer macro expands first */
	YY_BREAK
case 77:
#line 232 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
case 78:
YY_RULE_SETUP
#line 232 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ appendDefValue(V3PreLextext,V3PreLexleng); }
	YY_BREAK
/* One line comments. */
case 79:
YY_RULE_SETUP
#line 235 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ if (optPsl())        { pslMoreNeeded(true); yy_push_state(PSLONEM); return(VP_PSL); }
			  else { yy_push_state(CMTONEM); yymore(); } }
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 237 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ linenoInc(); V3PreLextext=(char*)"\n"; V3PreLexleng=1; return (VP_WHITE); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 238 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ if (pslMoreNeeded()) { pslMoreNeeded(true); yy_push_state(PSLONEM); return(VP_PSL); }
			  else { yy_push_state(CMTONEM); yymore(); } }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 240 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yy_pop_state(); return (VP_COMMENT); }
	YY_BREAK
/* Psl oneline comments */
case 83:
YY_RULE_SETUP
#line 243 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ pslParenLevelInc(); return (VP_TEXT); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 244 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ pslParenLevelDec(); return (VP_TEXT); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 245 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ if (!pslParenLevel()) {BEGIN PSLONEE; pslMoreNeeded(false);} return (VP_TEXT); }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 246 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ linenoInc(); yy_pop_state(); V3PreLextext=(char*)"\n"; V3PreLexleng=1; return(VP_WHITE); }
	YY_BREAK
/* Completed psl oneline comments */
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 249 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ linenoInc(); yy_pop_state(); V3PreLextext=(char*)"\n"; V3PreLexleng=1; return(VP_WHITE); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 250 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 251 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yyerrorf("Unexpected text following psl assertion\n"); }
	YY_BREAK
/* C-style comments. */
/**** See also DEFCMT */
/* We distinguish between the start of a comment, and later, so we may find a "psl" prefix */
case 90:
YY_RULE_SETUP
#line 256 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yy_push_state(optPsl() ? CMTBEGM : CMTMODE); yymore(); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 257 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ V3PreLexleng -= 3; BEGIN PSLMUL1; return (VP_COMMENT); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 258 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 259 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yy_pop_state(); return(VP_COMMENT); }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 260 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ linenoInc(); yymore(); }
	YY_BREAK
case YY_STATE_EOF(CMTBEGM):
case YY_STATE_EOF(CMTMODE):
#line 261 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yyerrorf("EOF in '/* ... */' block comment\n"); V3PreLexleng=0; yyterminate(); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 262 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 263 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ BEGIN CMTMODE; yymore(); }	/* Non 'psl' beginning in comment */
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 264 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
/* Psl C-style comments. */
/* EOFs are normal because / * `foo(..) * / hits a unputString EOF */
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 268 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yyless(0); BEGIN PSLMULM; return(VP_PSL); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 269 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yy_pop_state(); return(VP_COMMENT); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 270 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ return (VP_COMMENT); }	/* Comments inside block comments get literal inclusion (later removal) */
	YY_BREAK
/* Define calls */
/* symbdef prevents normal lex rules from making `\`"foo a symbol {`"foo} instead of a BACKQUOTE */
case 101:
YY_RULE_SETUP
#line 274 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ return (VP_DEFREF); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 275 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ V3PreLexleng-=2; return (VP_DEFREF_JOIN); }
	YY_BREAK
/* Generics */
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 278 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ linenoInc(); V3PreLextext=(char*)"\n"; V3PreLexleng=1; return(VP_WHITE); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PSLMULM):
case YY_STATE_EOF(PSLONEM):
#line 279 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ yyterminate(); }  /* A "normal" EOF */
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 280 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ return (VP_SYMBOL); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 281 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ V3PreLexleng-=2; return (VP_SYMBOL_JOIN); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 282 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ return (VP_WHITE); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 283 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 284 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 285 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
{ return (VP_TEXT); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 286 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"
ECHO;
	YY_BREAK
#line 2037 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex_pregen.yy.cpp"
case YY_STATE_EOF(PSLONEE):
case YY_STATE_EOF(PSLMUL1):
case YY_STATE_EOF(CMTONEM):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed V3PreLexin at a new source and called
			 * V3PreLexlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = V3PreLexin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( V3PreLexwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * V3PreLextext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of V3PreLexlex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					V3PreLexrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			V3PreLexrestart(V3PreLexin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) V3PreLexrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 337 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 337 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 336);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

    static void yyunput (int c, register char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up V3PreLextext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update V3PreLexlineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					V3PreLexrestart(V3PreLexin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( V3PreLexwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve V3PreLextext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and V3PreLexlineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void V3PreLexrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        V3PreLexensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            V3PreLex_create_buffer(V3PreLexin,YY_BUF_SIZE );
	}

	V3PreLex_init_buffer(YY_CURRENT_BUFFER,input_file );
	V3PreLex_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void V3PreLex_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		V3PreLexpop_buffer_state();
	 *		V3PreLexpush_buffer_state(new_buffer);
     */
	V3PreLexensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	V3PreLex_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (V3PreLexwrap()) processing, but the only time this flag
	 * is looked at is after V3PreLexwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void V3PreLex_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	V3PreLexin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE V3PreLex_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) V3PreLexalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in V3PreLex_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) V3PreLexalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in V3PreLex_create_buffer()" );

	b->yy_is_our_buffer = 1;

	V3PreLex_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with V3PreLex_create_buffer()
 * 
 */
/* %if-c-only */
    void V3PreLex_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		V3PreLexfree((void *) b->yy_ch_buf  );

	V3PreLexfree((void *) b  );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a V3PreLexrestart() or at EOF.
 */
/* %if-c-only */
    static void V3PreLex_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	V3PreLex_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then V3PreLex_init_buffer was _probably_
     * called from V3PreLexrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void V3PreLex_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		V3PreLex_load_buffer_state( );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void V3PreLexpush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	V3PreLexensure_buffer_stack();

	/* This block is copied from V3PreLex_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from V3PreLex_switch_to_buffer. */
	V3PreLex_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void V3PreLexpop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	V3PreLex_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		V3PreLex_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void V3PreLexensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)V3PreLexalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in V3PreLexensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)V3PreLexrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in V3PreLexensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE V3PreLex_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) V3PreLexalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in V3PreLex_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	V3PreLex_switch_to_buffer(b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to V3PreLexlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       V3PreLex_scan_bytes() instead.
 */
YY_BUFFER_STATE V3PreLex_scan_string (yyconst char * yystr )
{
    
	return V3PreLex_scan_bytes(yystr,strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to V3PreLexlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE V3PreLex_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) V3PreLexalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in V3PreLex_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = V3PreLex_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in V3PreLex_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

/* %if-c-only */
    static void yy_push_state (int  new_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) V3PreLexalloc(new_size  );

		else
			(yy_start_stack) = (int *) V3PreLexrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
    static void yy_pop_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
    static int yy_top_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up V3PreLextext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		V3PreLextext[V3PreLexleng] = (yy_hold_char); \
		(yy_c_buf_p) = V3PreLextext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		V3PreLexleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int V3PreLexget_lineno  (void)
{
        
    return V3PreLexlineno;
}

/** Get the input stream.
 * 
 */
FILE *V3PreLexget_in  (void)
{
        return V3PreLexin;
}

/** Get the output stream.
 * 
 */
FILE *V3PreLexget_out  (void)
{
        return V3PreLexout;
}

/** Get the length of the current token.
 * 
 */
int V3PreLexget_leng  (void)
{
        return V3PreLexleng;
}

/** Get the current token.
 * 
 */

char *V3PreLexget_text  (void)
{
        return V3PreLextext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param line_number
 * 
 */
void V3PreLexset_lineno (int  line_number )
{
    
    V3PreLexlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see V3PreLex_switch_to_buffer
 */
void V3PreLexset_in (FILE *  in_str )
{
        V3PreLexin = in_str ;
}

void V3PreLexset_out (FILE *  out_str )
{
        V3PreLexout = out_str ;
}

int V3PreLexget_debug  (void)
{
        return V3PreLex_flex_debug;
}

void V3PreLexset_debug (int  bdebug )
{
        V3PreLex_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from V3PreLexlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    V3PreLexin = stdin;
    V3PreLexout = stdout;
#else
    V3PreLexin = (FILE *) 0;
    V3PreLexout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * V3PreLexlex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* V3PreLexlex_destroy is for both reentrant and non-reentrant scanners. */
int V3PreLexlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		V3PreLex_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		V3PreLexpop_buffer_state();
	}

	/* Destroy the stack itself. */
	V3PreLexfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        V3PreLexfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * V3PreLexlex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *V3PreLexalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *V3PreLexrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void V3PreLexfree (void * ptr )
{
	free( (char *) ptr );	/* see V3PreLexrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 286 "/1000/torc-isi/branches/staging/1.0/src/.//torc/externals/verilator/src/V3PreLex.l"



void V3PreLex::pushStateDefArg(int level) {
    // Enter define substitution argument state
    yy_push_state(ARGMODE);
    m_parenLevel = level;
    m_defValue = "";
}

void V3PreLex::pushStateDefForm() {
    // Enter define formal arguments state
    yy_push_state(DEFFPAR);  // First is an optional ( to begin args
    m_parenLevel = 0;
    m_defValue = "";
}

void V3PreLex::pushStateDefValue() {
    // Enter define value state
    yy_push_state(DEFVAL);
    m_parenLevel = 0;
    m_defValue = "";
}

void V3PreLex::pushStateIncFilename() {
    // Enter include <> filename state
    yy_push_state(INCMODE);
    yymore();
}

void V3PreLex::debug(int level) { V3PreLex_flex_debug=level; }
int V3PreLex::debug() { return V3PreLex_flex_debug; }

int V3PreLex::lex() {
    V3PreLex::s_currentLexp = this;  // Tell parser where to get/put data
    m_tokFilelinep = curFilelinep();  // Remember token start location, may be updated by the lexer later
    return V3PreLexlex();
}

size_t V3PreLex::inputToLex(char* buf, size_t max_size) {
    // We need a custom YY_INPUT because we can't use flex buffers.
    // Flex buffers are limited to 2GB, and we can't chop into 2G pieces
    // because buffers can't end in the middle of tokens.
    // Note if we switched streams here (which we don't) "buf" would be
    // become a stale invalid pointer.
    //
    VPreStream* streamp = curStreamp();
    if (debug()>=10) { cout<<"-  pp:inputToLex ITL s="<<max_size<<" bs="<<streamp->m_buffers.size()<<endl;  dumpStack(); }
    // For testing, use really small chunks
    //if (max_size > 13) max_size=13;
  again:
    size_t got = 0;
    // Get from this stream
    while (got < max_size	// Haven't got enough
	   && !streamp->m_buffers.empty()) {	// And something buffered
	string front = curStreamp()->m_buffers.front(); streamp->m_buffers.pop_front();
	size_t len = front.length();
	if (len > (max_size-got)) {  // Front string too big
	    len = (max_size-got);
	    string remainder = front.substr(len);
	    front = front.substr(0, len);
	    streamp->m_buffers.push_front(remainder);  // Put back remainder for next time
	}
	strncpy(buf+got, front.c_str(), len);
	got += len;
    }
    if (!got) { // end of stream; try "above" file
	bool again=false;
	string forceOut = endOfStream(again/*ref*/);
	streamp = curStreamp();  // May have been updated
	if (forceOut != "") {
	    if (forceOut.length() > max_size) {
		yyerrorf("Output buffer too small for a `line");
	    } else {
		got = forceOut.length();
		strncpy(buf, forceOut.c_str(), got);
	    }
	} else {
	    if (streamp->m_eof) {
		if (V3PreLex_flex_debug) cout<<"-  EOF\n";
	    }
	    got = 0;  // 0=EOF/EOS - although got was already 0.
	    if (again) goto again;
	}
    }
    if (debug()>=10) { cout<<"-  pp::inputToLex  got="<<got<<" '"<<string(buf,got)<<"'"<<endl; }
    return got;
}

string V3PreLex::endOfStream(bool& againr) {
    // Switch to file or next unputString
    againr = false;
    if (V3PreLex_flex_debug) cout<<"-EOS state="<<curStreamp()->m_termState<<" at "<<curFilelinep()<<endl;
    if (curStreamp()->m_eof) return "";   // Don't delete the final "EOF" stream
    bool exited_file = curStreamp()->m_file;
    if (!exited_file) {
	// Midpoint of stream, just change buffers
	delete curStreamp();
	m_streampStack.pop();  // Must work as size>1; EOF is entry 0
	againr = true;
	return "";
    }
    // Multiple steps because we need FLEX to see ending \n and EOS to end
    // any illegal states, like an unterminated `protected region
    else if (!curStreamp()->m_termState) {
	// First shutdown phase for a file
	// Terminate all files with a newline.  This prevents problems if
	// the user had a define without a terminating newline,
	// otherwise the resumed file's next line would get tacked on.
	// Also makes it likely the `line that changes files comes out
	// immediately.
	curStreamp()->m_termState = 1;
	return "\n";  // Exit old file
    }
    else if (curStreamp()->m_termState == 1) {
	// Now the EOF - can't be sent with other characters
	curStreamp()->m_termState = 2;
	return "";  // End of file
    }
    else if (curStreamp()->m_termState == 2) {
	// Now ending `line
	curStreamp()->m_termState = 3;
	return curFilelinep()->lineDirectiveStrg(2);  // Exit old file
    }
    else {
	// Final shutdown phase for a stream, we can finally change the
	// current fileline to the new stream
	curStreamp()->m_termState = 0;
	FileLine* filelinep = curFilelinep();
	delete curStreamp();
	m_streampStack.pop();  // Must work as size>1; EOF is entry 0
	if (curStreamp()->m_eof) {
	    // EOF doesn't have a "real" fileline, but a linenumber of 0 from init time
	    // Inherit whatever we last parsed so it's more obvious.
	    curFilelinep(filelinep);
	}
	// The caller parser remembered the start location for the text we are parsing,
	// but we've discovered there was a file switch along the way, so update it.
	m_tokFilelinep = curFilelinep();
	//
	if (curStreamp()->m_eof) {
	    return "";
	} else {
	    return curFilelinep()->lineDirectiveStrg(0);  // Reenter resumed file
	}
    }
}

void V3PreLex::initFirstBuffer(FileLine* filelinep) {
    // Called from constructor to make first buffer
    // V3PreLex_create_buffer also sets yy_fill_buffer=1 so reads from YY_INPUT
    VPreStream* streamp = new VPreStream(filelinep, this);
    streamp->m_eof = true;
    m_streampStack.push(streamp);
    //
    m_bufferState = V3PreLex_create_buffer(NULL,YY_BUF_SIZE);
    V3PreLex_switch_to_buffer(m_bufferState);
    V3PreLexrestart(NULL);
}

void V3PreLex::scanNewFile(FileLine* filelinep) {
    // Called on new open file.  scanBytesBack will be called next.
    if (streamDepth() > V3PreProc::DEFINE_RECURSION_LEVEL_MAX) {
	// The recursive `include in VPreProcImp should trigger first
	yyerrorf("Recursive `define or other nested inclusion");
	curStreamp()->m_eof = true;  // Fake it to stop recursion
    } else {
	VPreStream* streamp = new VPreStream(filelinep, this);
	m_tokFilelinep = curFilelinep();
	streamp->m_file = true;
	scanSwitchStream(streamp);
    }
}

void V3PreLex::scanBytes(const string& str) {
    // Note buffers also appended in ::scanBytesBack
    // Not "m_buffers.push_front(string(strp,len))" as we need a `define
    // to take effect immediately, in the middle of the current buffer
    // Also we don't use scan_bytes that would set yy_fill_buffer
    // which would force Flex to bypass our YY_INPUT routine.
    if (streamDepth() > V3PreProc::DEFINE_RECURSION_LEVEL_MAX) {
	// More streams if recursive `define with complex insertion
	// More buffers mostly if something internal goes funky
	yyerrorf("Recursive `define or other nested inclusion");
	curStreamp()->m_eof = true;  // Fake it to stop recursion
    } else {
	VPreStream* streamp = new VPreStream(curFilelinep(), this);
	streamp->m_buffers.push_front(str);
	scanSwitchStream(streamp);
    }
}

void V3PreLex::scanSwitchStream(VPreStream* streamp) {
    curStreamp()->m_buffers.push_front(currentUnreadChars());
    m_streampStack.push(streamp);
    V3PreLexrestart(NULL);
}

void V3PreLex::scanBytesBack(const string& str) {
    // Initial creation, that will pull from YY_INPUT==inputToLex
    // Note buffers also appended in ::scanBytes
    if (curStreamp()->m_eof) yyerrorf("scanBytesBack without being under scanNewFile");
    curStreamp()->m_buffers.push_back(str);
}

string V3PreLex::currentUnreadChars() {
    // WARNING - Peeking at internals
    ssize_t left = (yy_n_chars - (yy_c_buf_p -currentBuffer()->yy_ch_buf));
    if (left > 0) {  // left may be -1 at EOS
	*(yy_c_buf_p) = (yy_hold_char);
	return string(yy_c_buf_p, left);
    } else {
	return "";
    }
}

YY_BUFFER_STATE V3PreLex::currentBuffer() {
    return YY_CURRENT_BUFFER;
}

int V3PreLex::currentStartState() const {
    return YY_START;
}

void V3PreLex::lineDirective(const char* textp) {
    curFilelinep()->lineDirective(textp, m_enterExit/*ref*/);
    // Make sure we have a dependency on whatever file was specified
    V3File::addSrcDepend(curFilelinep()->filename());
}

void V3PreLex::dumpSummary() {
    cout<<"-  pp::dumpSummary  curBuf="<<(void*)(currentBuffer());
#ifdef FLEX_DEBUG  // Else peeking at internals may cause portability issues
    ssize_t left = (yy_n_chars
		    - (yy_c_buf_p
		       -currentBuffer()->yy_ch_buf));
    cout<<" left="<<dec<<left;
#endif
    cout<<endl;
}

void V3PreLex::dumpStack() {
    // For debug use
    dumpSummary();
    stack<VPreStream*> tmpstack = LEXP->m_streampStack;
    while (!tmpstack.empty()) {
	VPreStream* streamp = tmpstack.top();
	cout<<"-    bufferStack["<<(void*)(streamp)<<"]: "
	    <<" at="<<streamp->m_curFilelinep
	    <<" nBuf="<<streamp->m_buffers.size()
	    <<" size0="<<(streamp->m_buffers.empty() ? 0 : streamp->m_buffers.front().length())
	    <<(streamp->m_eof?" [EOF]":"")
	    <<(streamp->m_file?" [FILE]":"");
	cout<<endl;
	tmpstack.pop();
    }
}

string V3PreLex::cleanDbgStrg(const string& in) {
    string out = in;
    string::size_type pos;
    while ((pos=out.find("\n")) != string::npos) { out.replace(pos, 1, "\\n"); }
    while ((pos=out.find("\r")) != string::npos) { out.replace(pos, 1, "\\r"); }
    return out;
}

void V3PreLex::unused() {
    if (0) {
	// Prevent unused warnings
	yy_top_state();
	yyerror((char*)"");
    }
}

/*###################################################################
 * Local Variables:
 * mode: C++
 * End:
 */

